// Mocks generated by Mockito 5.3.2 from annotations
// in tv/test/presentation/provider/tv_detail_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:core/core.dart' as _i7;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie/domain/repositories/movie_repository.dart' as _i4;
import 'package:movie/movie.dart' as _i10;
import 'package:tv/domain/entities/tv.dart' as _i9;
import 'package:tv/domain/entities/tv_detail.dart' as _i8;
import 'package:tv/domain/repositories/tv_repository.dart' as _i2;
import 'package:tv/tv.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FaketvRepository_0 extends _i1.SmartFake implements _i2.tvRepository {
  _FaketvRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieRepository_2 extends _i1.SmartFake
    implements _i4.MovieRepository {
  _FakeMovieRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GettvDetail].
///
/// See the documentation for Mockito's code generation for more information.
class MockGettvDetail extends _i1.Mock implements _i5.GettvDetail {
  MockGettvDetail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.tvRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FaketvRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.tvRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.tvDetail>> execute(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.tvDetail>>.value(
            _FakeEither_1<_i7.Failure, _i8.tvDetail>(
          this,
          Invocation.method(
            #execute,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.tvDetail>>);
}

/// A class which mocks [GettvRecommendations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGettvRecommendations extends _i1.Mock
    implements _i5.GettvRecommendations {
  MockGettvRecommendations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.tvRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FaketvRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.tvRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i9.tv>>> execute(dynamic id) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, List<_i9.tv>>>.value(
            _FakeEither_1<_i7.Failure, List<_i9.tv>>(
          this,
          Invocation.method(
            #execute,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i9.tv>>>);
}

/// A class which mocks [GetWatchListStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatus extends _i1.Mock
    implements _i7.GetWatchListStatus {
  MockGetWatchListStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.MovieRepository);
  @override
  _i2.tvRepository get repository1 => (super.noSuchMethod(
        Invocation.getter(#repository1),
        returnValue: _FaketvRepository_0(
          this,
          Invocation.getter(#repository1),
        ),
      ) as _i2.tvRepository);
  @override
  _i6.Future<bool> execute(int? id) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> execute2(int? id) => (super.noSuchMethod(
        Invocation.method(
          #execute2,
          [id],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [SaveWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlist extends _i1.Mock implements _i7.SaveWatchlist {
  MockSaveWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository1 => (super.noSuchMethod(
        Invocation.getter(#repository1),
        returnValue: _FakeMovieRepository_2(
          this,
          Invocation.getter(#repository1),
        ),
      ) as _i4.MovieRepository);
  @override
  _i2.tvRepository get repository2 => (super.noSuchMethod(
        Invocation.getter(#repository2),
        returnValue: _FaketvRepository_0(
          this,
          Invocation.getter(#repository2),
        ),
      ) as _i2.tvRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, String>> execute(
          _i10.MovieDetail? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [movie],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, String>>.value(
            _FakeEither_1<_i7.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [movie],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, String>>);
  @override
  _i6.Future<_i3.Either<_i7.Failure, String>> execute2(_i8.tvDetail? tv) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute2,
          [tv],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, String>>.value(
            _FakeEither_1<_i7.Failure, String>(
          this,
          Invocation.method(
            #execute2,
            [tv],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, String>>);
}

/// A class which mocks [RemoveWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlist extends _i1.Mock implements _i7.RemoveWatchlist {
  MockRemoveWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.MovieRepository);
  @override
  _i2.tvRepository get repository2 => (super.noSuchMethod(
        Invocation.getter(#repository2),
        returnValue: _FaketvRepository_0(
          this,
          Invocation.getter(#repository2),
        ),
      ) as _i2.tvRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, String>> execute(
          _i10.MovieDetail? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [movie],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, String>>.value(
            _FakeEither_1<_i7.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [movie],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, String>>);
  @override
  _i6.Future<_i3.Either<_i7.Failure, String>> execute2(_i8.tvDetail? tv) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute2,
          [tv],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, String>>.value(
            _FakeEither_1<_i7.Failure, String>(
          this,
          Invocation.method(
            #execute2,
            [tv],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, String>>);
}
